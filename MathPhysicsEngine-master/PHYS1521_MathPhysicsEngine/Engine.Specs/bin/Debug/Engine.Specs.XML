<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Engine.Specs</name>
    </assembly>
    <members>
        <member name="T:Engine.Specs.EngineTester">
            <summary>
            This is a test class that uses XUnit testing. Each method below is a sample of
            how the testing can be accomplished.
            </summary>
        </member>
        <member name="M:Engine.Specs.EngineTester.TestSegmentLength(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Tests the method in the Calculator class that calculates the length of
            a line segment between two Eng_Point2D points A and B.
            Note that there are two sets of data, one will be from the Instructor, which
            will give you a passed test if your method works. The other set of data is your
            student data and will pass if the student has calculated the expected answer
            correctly.
            </summary>
            <param name="aX">The x-component of point A</param>
            <param name="aY">The y-component of point A</param>
            <param name="bX">The x-component of point B</param>
            <param name="bY">The y-component of point B</param>
            <param name="expected">The expected value given the two Eng_Point2D points.</param>
        </member>
        <member name="M:Engine.Specs.EngineTester.MidPointData">
            <summary>
            This method holds object-based data to be used for the TestMidPoint test method.
            The TestMidPoint method returns a Eng_Point2D data type theefore this is the means
            to test this type of method.
            </summary>
            <returns>A List of Objects</returns>
        </member>
        <member name="M:Engine.Specs.EngineTester.TestMidPoint(Engine.Classes.Eng_Point2D,Engine.Classes.Eng_Point2D,Engine.Classes.Eng_Point2D)">
            <summary>
            This test test the calcualtion of the midpoint, as a Eng_Point2D type, between
            two Eng_Point2D points. The test data for this test comes from "MidPointData".
            </summary>
            <param name="givenA">Eng_Point2D: test point A</param>
            <param name="givenB">Eng_Point2D: test point B</param>
            <param name="expected">Expected, calculated, midpoint, a Eng_Point2D point, between test points A and B</param>
        </member>
        <member name="T:Engine.Specs.Lab1Tester">
            <summary>
            Test Calculator
            </summary>
        </member>
        <member name="M:Engine.Specs.Lab1Tester.TestCalculateAdjacentOpposite(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Test Data for Adjacent opposite looking for angle and hypotenuse
            </summary>
            <param name="degrees"></param>
            <param name="hypotenuse"></param>
            <param name="adjacent"></param>
            <param name="opposite"></param>
        </member>
        <member name="M:Engine.Specs.Lab1Tester.TestCalculateAdjacentHypotenuse(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Test for solving the adjacent and hypotenuse
            </summary>
            <param name="degrees"></param>
            <param name="opposite"></param>
            <param name="adjacent"></param>
            <param name="hypotenuse"></param>
        </member>
        <member name="M:Engine.Specs.Lab1Tester.TestCalculateOppositeHypotenuse(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Test the calculation for the opposite and hypotenuse
            </summary>
            <param name="degrees"></param>
            <param name="adjacent"></param>
            <param name="opposite"></param>
            <param name="hypotenuse"></param>
        </member>
        <member name="M:Engine.Specs.Lab1Tester.TestCalculateHypotenuseTheta(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            test for calculating the hypotenuse and angle
            </summary>
            <param name="adjacent"></param>
            <param name="opposite"></param>
            <param name="hypotenuse"></param>
            <param name="degrees"></param>
        </member>
        <member name="M:Engine.Specs.Lab1Tester.TestCalculateAdjacentTheta(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            test for Calculating the adjacent and angle theta
            </summary>
            <param name="opposite"></param>
            <param name="hypotenuse"></param>
            <param name="adjacent"></param>
            <param name="degrees"></param>
        </member>
        <member name="M:Engine.Specs.Lab1Tester.TestCalculateOppositeTheta(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Test for the calculation of opposite and theta
            </summary>
            <param name="adjacent"></param>
            <param name="hypotenuse"></param>
            <param name="opposite"></param>
            <param name="degrees"></param>
        </member>
        <member name="M:Engine.Specs.Lab1Tester.AddVector2DData">
            <summary>
            test data for adding two 2D vector
            </summary>
            <returns></returns>
        </member>
        <member name="M:Engine.Specs.Lab1Tester.NormalizeVector2DData">
            <summary>
            test data for normalizing 2D vector
            </summary>
            <returns></returns>
        </member>
        <member name="M:Engine.Specs.Lab1Tester.TestAddVector(Engine.Classes.Eng_Vector2D,Engine.Classes.Eng_Vector2D,Engine.Classes.Eng_Vector2D)">
            <summary>
            test for adding two vectors
            </summary>
            <param name="givenA"></param>
            <param name="givenB"></param>
            <param name="expected"></param>
        </member>
        <member name="M:Engine.Specs.Lab1Tester.TestNormailze(Engine.Classes.Eng_Vector2D,Engine.Classes.Eng_Vector2D)">
            <summary>
            test for normalize two vectors
            </summary>
            <param name="givenA"></param>
            <param name="expected"></param>
        </member>
        <member name="M:Engine.Specs.Lab1Tester.TestDotProduct(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            test for solving dot product of two 2D vectors
            </summary>
            <param name="givenAx"></param>
            <param name="givenAy"></param>
            <param name="givenBx"></param>
            <param name="givenBy"></param>
            <param name="expected"></param>
        </member>
        <member name="M:Engine.Specs.Lab1Tester.TestAngleBetweenVectors(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Test for calculating the angle between two 2D vectors
            </summary>
            <param name="givenAx"></param>
            <param name="givenAy"></param>
            <param name="givenBx"></param>
            <param name="givenBy"></param>
            <param name="expected"></param>
        </member>
        <member name="M:Engine.Specs.Lab1Tester.AddVector3DData">
            <summary>
            test data for adding two 3d vectors
            </summary>
            <returns></returns>
        </member>
        <member name="M:Engine.Specs.Lab1Tester.NormalizeVector3DData">
            <summary>
            test data for normalize 3d vector
            </summary>
            <returns></returns>
        </member>
        <member name="M:Engine.Specs.Lab1Tester.CrossProductData">
            <summary>
            test data for cross product of 3d vectors
            </summary>
            <returns></returns>
        </member>
        <member name="M:Engine.Specs.Lab1Tester.SurfaceNormalData">
            <summary>
            surface normal 3d data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Engine.Specs.Lab1Tester.TestAddVector(Engine.Classes.Eng_Vector3D,Engine.Classes.Eng_Vector3D,Engine.Classes.Eng_Vector3D)">
            <summary>
            test calculation for adding 3d vector
            </summary>
            <param name="givenA"></param>
            <param name="givenB"></param>
            <param name="expected"></param>
        </member>
        <member name="M:Engine.Specs.Lab1Tester.TestNormailze(Engine.Classes.Eng_Vector3D,Engine.Classes.Eng_Vector3D)">
            <summary>
            test calculation for testnormalize 3d vector
            </summary>
            <param name="givenA"></param>
            <param name="expected"></param>
        </member>
        <member name="M:Engine.Specs.Lab1Tester.TestDotProduct3D(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            test calculation for dot product of two 3D vectors
            </summary>
            <param name="givenAx"></param>
            <param name="givenAy"></param>
            <param name="givenAz"></param>
            <param name="givenBx"></param>
            <param name="givenBy"></param>
            <param name="givenBz"></param>
            <param name="expected"></param>
        </member>
        <member name="M:Engine.Specs.Lab1Tester.TestAngleBetweenVectors3D(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            testing for the calculations of the angle between two 3D vectors
            </summary>
            <param name="givenAx"></param>
            <param name="givenAy"></param>
            <param name="givenAz"></param>
            <param name="givenBx"></param>
            <param name="givenBy"></param>
            <param name="givenBz"></param>
            <param name="expected"></param>
        </member>
        <member name="M:Engine.Specs.Lab1Tester.TestCrossProduct(Engine.Classes.Eng_Vector3D,Engine.Classes.Eng_Vector3D,Engine.Classes.Eng_Vector3D)">
            <summary>
            test calculation for crossproduct between two 3d vectors
            </summary>
            <param name="givenA"></param>
            <param name="givenB"></param>
            <param name="expected"></param>
        </member>
        <member name="M:Engine.Specs.Lab1Tester.TestSurfaceNormal(Engine.Classes.Eng_Vector3D,Engine.Classes.Eng_Vector3D,Engine.Classes.Eng_Vector3D)">
            <summary>
            test calculation for testing the surface normal between two 3D vectors
            </summary>
            <param name="givenA"></param>
            <param name="givenB"></param>
            <param name="expected"></param>
        </member>
        <member name="T:Engine.Specs.Lab2Tester">
            <summary>
            Test Class for lab 2
            </summary>
        </member>
        <member name="M:Engine.Specs.Lab2Tester.MatrixMultiplicationData">
            <summary>
            4x4 matrix multiplication data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Engine.Specs.Lab2Tester.MatrixVectorMultiplicationData">
            <summary>
            test data for MatrixVectorMultiplication
            </summary>
            <returns></returns>
        </member>
        <member name="M:Engine.Specs.Lab2Tester.TransposeMatrixData">
            <summary>
            transpose matrix data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Engine.Specs.Lab2Tester.InverseMatrixData">
            <summary>
            inverse matrix data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Engine.Specs.Lab2Tester.TestMultiplyMatrices4(Engine.Classes.Eng_Matrix4x4,Engine.Classes.Eng_Matrix4x4,Engine.Classes.Eng_Matrix4x4)">
            <summary>
            multiply 2 4x4 matrix
            </summary>
            <param name="givenA"></param>
            <param name="givenB"></param>
            <param name="expected"></param>
        </member>
        <member name="M:Engine.Specs.Lab2Tester.TestMultiplyVector4ByMatrix(Engine.Classes.Eng_Matrix4x4,Engine.Classes.Eng_Vector4D,Engine.Classes.Eng_Vector4D)">
            <summary>
            multiplyvector4x4 test
            </summary>
            <param name="givenM"></param>
            <param name="givenV"></param>
            <param name="expected"></param>
        </member>
        <member name="M:Engine.Specs.Lab2Tester.TestTranposeMatrix(Engine.Classes.Eng_Matrix4x4,Engine.Classes.Eng_Matrix4x4)">
            <summary>
            test transpose matrix
            </summary>
            <param name="given"></param>
            <param name="expected"></param>
        </member>
        <member name="M:Engine.Specs.Lab2Tester.TestDeterminant4(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            test determinant4x4
            </summary>
            <param name="m11"></param>
            <param name="m12"></param>
            <param name="m13"></param>
            <param name="m14"></param>
            <param name="m21"></param>
            <param name="m22"></param>
            <param name="m23"></param>
            <param name="m24"></param>
            <param name="m31"></param>
            <param name="m32"></param>
            <param name="m33"></param>
            <param name="m34"></param>
            <param name="m41"></param>
            <param name="m42"></param>
            <param name="m43"></param>
            <param name="m44"></param>
            <param name="expected"></param>
        </member>
        <member name="M:Engine.Specs.Lab2Tester.TestInverse4(Engine.Classes.Eng_Matrix4x4,Engine.Classes.Eng_Matrix4x4)">
            <summary>
            test inverse 
            </summary>
            <param name="given"></param>
            <param name="expected"></param>
        </member>
    </members>
</doc>
