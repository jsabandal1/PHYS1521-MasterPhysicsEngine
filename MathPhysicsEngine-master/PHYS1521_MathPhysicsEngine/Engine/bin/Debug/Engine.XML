<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Engine</name>
    </assembly>
    <members>
        <member name="T:Engine.Classes.Eng_Circle">
            <summary>
            This class represents a Circle for mathematical calculations.
            </summary>
        </member>
        <member name="T:Engine.Classes.Eng_Matrix2x2">
            <summary>
            This class represents a 2x2  matrix
            </summary>
        </member>
        <member name="P:Engine.Classes.Eng_Matrix2x2.m11">
            <summary>
            row 1 column 1
            </summary>
        </member>
        <member name="P:Engine.Classes.Eng_Matrix2x2.m12">
            <summary>
            row 1 column 2
            </summary>
        </member>
        <member name="P:Engine.Classes.Eng_Matrix2x2.m21">
            <summary>
            row 2 column 1
            </summary>
        </member>
        <member name="P:Engine.Classes.Eng_Matrix2x2.m22">
            <summary>
            row 2 column 2
            </summary>
        </member>
        <member name="M:Engine.Classes.Eng_Matrix2x2.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            2x2 Matrix
            </summary>
            <param name="m11"></param>
            <param name="m12"></param>
            <param name="m21"></param>
            <param name="m22"></param>
        </member>
        <member name="T:Engine.Classes.Eng_Matrix3x3">
            <summary>
            This class represents a 3x3  matrix
            </summary>
        </member>
        <member name="P:Engine.Classes.Eng_Matrix3x3.m11">
            <summary>
            row 1 column 1
            </summary>
        </member>
        <member name="P:Engine.Classes.Eng_Matrix3x3.m12">
            <summary>
            row 1 column 2
            </summary>
        </member>
        <member name="P:Engine.Classes.Eng_Matrix3x3.m13">
            <summary>
            row 1 column 3
            </summary>
        </member>
        <member name="P:Engine.Classes.Eng_Matrix3x3.m21">
            <summary>
            row 2 column 1
            </summary>
        </member>
        <member name="P:Engine.Classes.Eng_Matrix3x3.m22">
            <summary>
            row 2 column 2
            </summary>
        </member>
        <member name="P:Engine.Classes.Eng_Matrix3x3.m23">
            <summary>
            row 2 column 3
            </summary>
        </member>
        <member name="P:Engine.Classes.Eng_Matrix3x3.m31">
            <summary>
            row 3 column 1
            </summary>
        </member>
        <member name="P:Engine.Classes.Eng_Matrix3x3.m32">
            <summary>
            row 3 column 2
            </summary>
        </member>
        <member name="P:Engine.Classes.Eng_Matrix3x3.m33">
            <summary>
            row 3 column 3
            </summary>
        </member>
        <member name="M:Engine.Classes.Eng_Matrix3x3.#ctor">
            <summary>
            empty constructor
            </summary>
        </member>
        <member name="M:Engine.Classes.Eng_Matrix3x3.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            3x3 Matrix
            </summary>
            <param name="m11"></param>
            <param name="m12"></param>
            <param name="m13"></param>
            <param name="m21"></param>
            <param name="m22"></param>
            <param name="m23"></param>
            <param name="m31"></param>
            <param name="m32"></param>
            <param name="m33"></param>
        </member>
        <member name="T:Engine.Classes.Eng_Matrix4x4">
            <summary>
            This class represents a 4x4  matrix
            </summary>
        </member>
        <member name="P:Engine.Classes.Eng_Matrix4x4.m11">
            <summary>
            row 1 column 1
            </summary>
        </member>
        <member name="P:Engine.Classes.Eng_Matrix4x4.m12">
            <summary>
            row 1 column 2
            </summary>
        </member>
        <member name="P:Engine.Classes.Eng_Matrix4x4.m13">
            <summary>
            row 1 column 3
            </summary>
        </member>
        <member name="P:Engine.Classes.Eng_Matrix4x4.m14">
            <summary>
            row 1 column 4
            </summary>
        </member>
        <member name="P:Engine.Classes.Eng_Matrix4x4.m21">
            <summary>
            row 2 column 1
            </summary>
        </member>
        <member name="P:Engine.Classes.Eng_Matrix4x4.m22">
            <summary>
            row 2 column 2
            </summary>
        </member>
        <member name="P:Engine.Classes.Eng_Matrix4x4.m23">
            <summary>
            row 2 column 3
            </summary>
        </member>
        <member name="P:Engine.Classes.Eng_Matrix4x4.m24">
            <summary>
            row 2 column 4
            </summary>
        </member>
        <member name="P:Engine.Classes.Eng_Matrix4x4.m31">
            <summary>
            row 3 column 1
            </summary>
        </member>
        <member name="P:Engine.Classes.Eng_Matrix4x4.m32">
            <summary>
            row 3 column 2
            </summary>
        </member>
        <member name="P:Engine.Classes.Eng_Matrix4x4.m33">
            <summary>
            row 3 column 3
            </summary>
        </member>
        <member name="P:Engine.Classes.Eng_Matrix4x4.m34">
            <summary>
            row 3 column 4
            </summary>
        </member>
        <member name="P:Engine.Classes.Eng_Matrix4x4.m41">
            <summary>
            row 4 column 1
            </summary>
        </member>
        <member name="P:Engine.Classes.Eng_Matrix4x4.m42">
            <summary>
            row 4 column 2
            </summary>
        </member>
        <member name="P:Engine.Classes.Eng_Matrix4x4.m43">
            <summary>
            row 4 column 3
            </summary>
        </member>
        <member name="P:Engine.Classes.Eng_Matrix4x4.m44">
            <summary>
            row 4 column 4
            </summary>
        </member>
        <member name="M:Engine.Classes.Eng_Matrix4x4.#ctor">
            <summary>
            empty constructor
            </summary>
        </member>
        <member name="M:Engine.Classes.Eng_Matrix4x4.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            4x4 Matrix
            </summary>
            <param name="m11"></param>
            <param name="m12"></param>
            <param name="m13"></param>
            <param name="m14"></param>
            <param name="m21"></param>
            <param name="m22"></param>
            <param name="m23"></param>
            <param name="m24"></param>
            <param name="m31"></param>
            <param name="m32"></param>
            <param name="m33"></param>
            <param name="m34"></param>
            <param name="m41"></param>
            <param name="m42"></param>
            <param name="m43"></param>
            <param name="m44"></param>
        </member>
        <member name="T:Engine.Classes.Eng_Point2D">
            <summary>
            This class simulates a point in 2D space.
            </summary>
        </member>
        <member name="P:Engine.Classes.Eng_Point2D.x">
            <summary>
            This property represents the x-coordinate
            </summary>
        </member>
        <member name="P:Engine.Classes.Eng_Point2D.y">
            <summary>
            This property represents the y-coordinate
            </summary>
        </member>
        <member name="M:Engine.Classes.Eng_Point2D.#ctor">
            <summary>
            Empty Eng_Point2D constructor
            </summary>
        </member>
        <member name="M:Engine.Classes.Eng_Point2D.#ctor(System.Double,System.Double)">
            <summary>
            Greedy Eng_Point2D constructor
            </summary>
            <param name="x">The x-coordinate</param>
            <param name="y">The y-coordinate</param>
        </member>
        <member name="T:Engine.Classes.Eng_Point3D">
            <summary>
            This class simulates a point in 3D LHR space.
            </summary>
        </member>
        <member name="P:Engine.Classes.Eng_Point3D.x">
            <summary>
            X point
            </summary>
        </member>
        <member name="P:Engine.Classes.Eng_Point3D.y">
            <summary>
            Y point
            </summary>
        </member>
        <member name="P:Engine.Classes.Eng_Point3D.z">
            <summary>
            Z point
            </summary>
        </member>
        <member name="M:Engine.Classes.Eng_Point3D.#ctor">
            <summary>
            greedy constructor
            </summary>
        </member>
        <member name="M:Engine.Classes.Eng_Point3D.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Represents a 3Dimensional point
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="T:Engine.Classes.Eng_Point4D">
            <summary>
            This class simulates a point in 3D LHR space using homogeneous coordinate system (i.e. has the w-axis)
            </summary>
        </member>
        <member name="T:Engine.Classes.Eng_PolarVector">
            <summary>
            This class represents a 2D vector with magnitude@direction
            </summary>
        </member>
        <member name="T:Engine.Classes.Eng_Quaternion">
            <summary>
            This class represents a Quaternion using z-axis heading
            </summary>
        </member>
        <member name="P:Engine.Classes.Eng_Quaternion.x">
            <summary>
            x coordinate of the 3D vector
            </summary>
        </member>
        <member name="P:Engine.Classes.Eng_Quaternion.y">
            <summary>
            y coordinate of the 3D vector
            </summary>
        </member>
        <member name="P:Engine.Classes.Eng_Quaternion.z">
            <summary>
            z coordinate of the 3D vecotr
            </summary>
        </member>
        <member name="P:Engine.Classes.Eng_Quaternion.w">
            <summary>
            W property of the quaternion
            </summary>
        </member>
        <member name="P:Engine.Classes.Eng_Quaternion.angle">
            <summary>
            angle property of quaternion
            </summary>
        </member>
        <member name="M:Engine.Classes.Eng_Quaternion.#ctor">
            <summary>
            empty Eng_Vector3D constructor
            </summary>
        </member>
        <member name="M:Engine.Classes.Eng_Quaternion.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="w"></param>
        </member>
        <member name="M:Engine.Classes.Eng_Quaternion.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            constructor that accepts rotation angle
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="w"></param>
            <param name="rotationAngle"></param>
        </member>
        <member name="T:Engine.Classes.Eng_Sphere">
            <summary>
            This class represents a Sphere for mathematical calculations.
            </summary>
        </member>
        <member name="T:Engine.Classes.Eng_Vector2D">
            <summary>
            This class represents a 2D Vector in component form
            </summary>
        </member>
        <member name="P:Engine.Classes.Eng_Vector2D.x">
            <summary>
            x coordinate of the 2D vector
            </summary>
        </member>
        <member name="P:Engine.Classes.Eng_Vector2D.y">
            <summary>
            y coordinate of the 3D vector
            </summary>
        </member>
        <member name="F:Engine.Classes.Eng_Vector2D.magnitude">
            <summary>
            magnitude of the vector
            </summary>
        </member>
        <member name="M:Engine.Classes.Eng_Vector2D.#ctor">
            <summary>
            empty Eng_Vector2D constructor
            </summary>
        </member>
        <member name="M:Engine.Classes.Eng_Vector2D.#ctor(System.Double,System.Double)">
            <summary>
            greedy Eng_Vector2D consturctor
            </summary>
            <param name="oldX"></param>
            <param name="oldY"></param>
        </member>
        <member name="T:Engine.Classes.Eng_Vector3D">
            <summary>
            This class represents a 3D vector in component form
            </summary>
        </member>
        <member name="P:Engine.Classes.Eng_Vector3D.x">
            <summary>
            x coordinate of the 3D vector
            </summary>
        </member>
        <member name="P:Engine.Classes.Eng_Vector3D.y">
            <summary>
            y coordinate of the 3D vector
            </summary>
        </member>
        <member name="P:Engine.Classes.Eng_Vector3D.z">
            <summary>
            z coordinate of the 3D vecotr
            </summary>
        </member>
        <member name="F:Engine.Classes.Eng_Vector3D.magnitude">
            <summary>
            magnitude of the 3D vector
            </summary>
        </member>
        <member name="M:Engine.Classes.Eng_Vector3D.#ctor">
            <summary>
            empty Eng_Vector3D constructor
            </summary>
        </member>
        <member name="M:Engine.Classes.Eng_Vector3D.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            greedy Eng_Vector3D consturctor
            </summary>
            <param name="oldX"></param>
            <param name="oldY"></param>
            <param name="oldZ"></param>
        </member>
        <member name="T:Engine.Classes.Eng_Vector4D">
            <summary>
            This class represents a 3D component vector in 4D homogeneous space
            </summary>
        </member>
        <member name="F:Engine.Classes.Eng_Vector4D.w">
            <summary>
            W property always 1
            </summary>
        </member>
        <member name="P:Engine.Classes.Eng_Vector4D.x">
            <summary>
            x property
            </summary>
        </member>
        <member name="P:Engine.Classes.Eng_Vector4D.y">
            <summary>
            y property
            </summary>
        </member>
        <member name="P:Engine.Classes.Eng_Vector4D.z">
            <summary>
            z property
            </summary>
        </member>
        <member name="M:Engine.Classes.Eng_Vector4D.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            4D Vector Object
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="w"></param>
        </member>
        <member name="T:Engine.Calculator">
            <summary>
            This class contains static methods to perform the math calculations.
            </summary>
        </member>
        <member name="M:Engine.Calculator.SegmentLength(Engine.Classes.Eng_Point2D,Engine.Classes.Eng_Point2D)">
            <summary>
            Calculates the length of a line segment between two 2D points.
            </summary>
            <param name="a">Eng_Point2D: a 2D point A</param>
            <param name="b">Eng_Point2D: a 2D point B</param>
            <returns>Double: length of the line segment.</returns>
        </member>
        <member name="M:Engine.Calculator.MidPoint(Engine.Classes.Eng_Point2D,Engine.Classes.Eng_Point2D)">
            <summary>
            Calculates the midpoint of the line segment between two 2D points.
            </summary>
            <param name="a">Eng_Point2D: a 2D point A</param>
            <param name="b">Eng_Point2D: a 2D point B</param>
            <returns>Eng_Point2D: midpoint on the line segemnt</returns>
        </member>
        <member name="M:Engine.Calculator.DegreeToRadians(System.Double)">
            <summary>
            Converts the angle in degrees to radian
            </summary>
            <param name="degree"></param>
            <returns></returns>
        </member>
        <member name="M:Engine.Calculator.RadiansToDegree(System.Double)">
            <summary>
            converts the angle in radian to degrees
            </summary>
            <param name="radian"></param>
            <returns></returns>
        </member>
        <member name="M:Engine.Calculator.AdjAndOpp(System.Double,System.Double)">
            <summary>
            Returns side Adjacent and Side Opposite if given is degreeAngle and hypotenuse
            </summary>
            <param name="degreeAngle"></param>
            <param name="hypotenuse"></param>
            <returns></returns>
        </member>
        <member name="M:Engine.Calculator.AdjAndHypo(System.Double,System.Double)">
            <summary>
            returns side adjacent and side hypotenuse if given is angle in degrees and side opposite
            </summary>
            <param name="degreeAngle"></param>
            <param name="opposite"></param>
            <returns></returns>
        </member>
        <member name="M:Engine.Calculator.OppAndHypo(System.Double,System.Double)">
            <summary>
            returns a side Opposite and side Hypotenuse if given is angle in degrees and side adjacent
            </summary>
            <param name="degreeAngle"></param>
            <param name="adjacent"></param>
            <returns></returns>
        </member>
        <member name="M:Engine.Calculator.HypoTheta(System.Double,System.Double)">
            <summary>
            Returns a Side and Angle in degrees if given is side Opposite and side Adjacent
            </summary>
            <param name="sideOpp"></param>
            <param name="sideAdj"></param>
            <returns></returns>
        </member>
        <member name="M:Engine.Calculator.AdjTheta(System.Double,System.Double)">
            <summary>
            returns a missing Side and missing angle in degrees if given is side Opposite and side Hypotenuse
            </summary>
            <param name="sideOpp"></param>
            <param name="sideHypo"></param>
            <returns></returns>
        </member>
        <member name="M:Engine.Calculator.OppoTheta(System.Double,System.Double)">
            <summary>
            returns a side and angle in degrees if the given is side adjacent and side hypotenuse
            </summary>
            <param name="SideAdj"></param>
            <param name="sideHypo"></param>
            <returns></returns>
        </member>
        <member name="M:Engine.Calculator.AddTwo2DVectors(Engine.Classes.Eng_Vector2D,Engine.Classes.Eng_Vector2D)">
            <summary>
            Adding two 2D Vectors
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Engine.Calculator.DotProductofTwo2DVectors(Engine.Classes.Eng_Vector2D,Engine.Classes.Eng_Vector2D)">
            <summary>
            Dot Product of two 2D Vectors
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Engine.Calculator.AngleBetweenTwo2DVectors(Engine.Classes.Eng_Vector2D,Engine.Classes.Eng_Vector2D)">
            <summary>
            Calculating the angle of two 2D Vecors in degrees
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Engine.Calculator.SurfaceNormalOfA2DVector(Engine.Classes.Eng_Vector2D)">
            <summary>
            getting the surface normal of a 2D vecotr
            </summary>
            <param name="first"></param>
            <returns></returns>
        </member>
        <member name="M:Engine.Calculator.AddTwo3DVectors(Engine.Classes.Eng_Vector3D,Engine.Classes.Eng_Vector3D)">
            <summary>
            Adding two 3D Vectors
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Engine.Calculator.DotProductofTwo3DVectors(Engine.Classes.Eng_Vector3D,Engine.Classes.Eng_Vector3D)">
            <summary>
            Dot Product of two 3D Vectors
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Engine.Calculator.CrossVectorProduct3D(Engine.Classes.Eng_Vector3D,Engine.Classes.Eng_Vector3D)">
            <summary>
            Solving the cross product of two 3D vectors
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Engine.Calculator.AngleBetweenTwo3DVectors(Engine.Classes.Eng_Vector3D,Engine.Classes.Eng_Vector3D)">
            <summary>
            Solving the Angle between two 3D Vectors
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Engine.Calculator.SurfaceNormalOfA3DVector(Engine.Classes.Eng_Vector3D)">
            <summary>
            Surface normal of a 3D Vector
            </summary>
            <param name="first"></param>
            <returns></returns>
        </member>
        <member name="M:Engine.Calculator.MultiplyVectorMatrix(Engine.Classes.Eng_Vector4D,Engine.Classes.Eng_Matrix4x4)">
            <summary>
            Multyiplying a 4x4 Matrix and a 4D vector
            </summary>
            <param name="vector"></param>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:Engine.Calculator.MultiplyVectorMatrix3x3(Engine.Classes.Eng_Vector3D,Engine.Classes.Eng_Matrix3x3)">
            <summary>
            Multiplication of a 3x3 vector to a 3x3matrix
            </summary>
            <param name="vector"></param>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:Engine.Calculator.MultiplyTwo4x4Matrix(Engine.Classes.Eng_Matrix4x4,Engine.Classes.Eng_Matrix4x4)">
            <summary>
            multiplying two 4x4 matrix 
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Engine.Calculator.TransposeMatrix(Engine.Classes.Eng_Matrix4x4)">
            <summary>
            Transposes a 4x4 matrix
            </summary>
            <param name="first"></param>
            <returns></returns>
        </member>
        <member name="M:Engine.Calculator.CalculateDeterminant4x4(Engine.Classes.Eng_Matrix4x4)">
            <summary>
            calculate the determinant of a 4x4 matrix
            </summary>
            <param name="first"></param>
            <returns></returns>
        </member>
        <member name="M:Engine.Calculator.InverseOfA4x4Matrix(Engine.Classes.Eng_Matrix4x4)">
            <summary>
            inverse of a 4x4 matrix
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Engine.Calculator.RotationMatrix(System.Double)">
            <summary>
            Rotation Matrix of two 2D point
            </summary>
            <param name="degree"></param>
            <returns></returns>
        </member>
        <member name="T:Engine.Validator">
            <summary>
            This class contains some basic validation methods.
            </summary>
        </member>
        <member name="M:Engine.Validator.IsDouble(System.String)">
            <summary>
            Validates the the input string can be converted to a Double
            </summary>
            <param name="sArg">The text to be validated.</param>
            <returns>True: if the string can be parsed to a Double, False if not.</returns>
        </member>
        <member name="M:Engine.Validator.IsFloat(System.String)">
            <summary>
            Validates the the input string can be converted to a Float
            </summary>
            <param name="sArg">The text to be validated.</param>
            <returns>True: if the string can be parsed to a Float, False if not.</returns>
        </member>
        <member name="M:Engine.Validator.IsInteger(System.String)">
            <summary>
            Validates the the input string can be converted to an Integer
            </summary>
            <param name="sArg">The text to be validated.</param>
            <returns>True: if the string can be parsed to an Integer, False if not.</returns>
        </member>
        <member name="M:Engine.Validator.ValidateTheta(System.Double)">
            <summary>
            Validates that the input angle, in degrees, is between 0 and 90.
            The values of 0 and 90 are invalid, as no triangle can have an
            angle on 0 degrees, and not right triangle can have two 90 degree
            angles.
            </summary>
            <param name="angle">The input angle in degrees (a double value)</param>
            <returns>True: if the angle is between 0 and 90, False if not</returns>
        </member>
        <member name="M:Engine.Validator.ValidateIncline(System.Double)">
            <summary>
            Validates that the input angle, in degrees, is between 0 and 90.
            The values of 0 and 90 are invalid, as no triangle can have an
            angle on 0 degrees, and not right triangle can have two 90 degree
            angles. 
            </summary>
            <param name="angle">The input angle in degrees (a double value)</param>
            <returns>True: if the angle is between 0 and 90, False if not</returns>
        </member>
        <member name="M:Engine.Validator.ValidateDirection(System.Double)">
            <summary>
            This validates that the angle is a positive angle from 0
            degrees to less than 360 degrees.
            </summary>
            <param name="angle">The input angle to be validated (a double value)</param>
            <returns>True: if the angle is from 0 to less than 360, False if not</returns>
        </member>
        <member name="M:Engine.Validator.ValidateRotationAngle(System.Double)">
            <summary>
            This validates that the angle is a positive angle from 0
            degrees to less than 360 degrees. 
            </summary>
            <param name="angle">The input angle to be validated (a double value)</param>
            <returns>True: if the angle is from 0 to less than 360, False if not</returns>
        </member>
        <member name="M:Engine.Validator.ValidateEuler(System.Double)">
            <summary>
            THis validates the Euler angles are not 90 degrees to avoid Gimbal Lock.
            </summary>
            <param name="angle">The angle to be validated in degrees (a double value)</param>
            <returns>True: if the angle is not greater than or equal to the absolute value of 90.</returns>
        </member>
    </members>
</doc>
